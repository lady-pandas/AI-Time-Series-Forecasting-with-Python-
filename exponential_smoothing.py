# -*- coding: utf-8 -*-
"""exponential_smoothing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BTV3xJ4-BekmoYFyPGiMrU6x_DBEnabU
"""

import pandas as pd
import numpy as np

!pip install sklearn-ts==0.0.3

"""# Load data"""

covid = pd.read_csv("https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/owid-covid-data.csv")
#covid.head(2)

target = 'new_cases'
h = 14

dataset = covid[(covid['location']=='World')].copy()[[target, 'date']]
dataset[[target]].plot()

#data = covid[(covid['location']=='World')][['new_cases']]
#data.index = pd.PeriodIndex(pd.to_datetime(covid[(covid['location']=='World')]['date']))

# prepare features
features = [target]
categorical_features= []
dataset.index = pd.to_datetime(dataset['date'])

"""#Splitting data"""

from sklearn_ts.validator import check_model

"""# Simple"""

# https://www.statsmodels.org/stable/generated/statsmodels.tsa.holtwinters.SimpleExpSmoothing.html
from statsmodels.tsa.holtwinters import SimpleExpSmoothing

model = SimpleExpSmoothing(endog=dataset[target])
model_fit = model.fit(use_brute=False)

y_pred = model_fit.predict(start=min(dataset.index), end=max(dataset.index))
y_pred

dataset['y_pred'] = y_pred
dataset[['y_pred', target]].plot()

"""# ETS"""

!pip install --upgrade statsmodels

# https://www.statsmodels.org/dev/examples/notebooks/generated/ets.html
from statsmodels.tsa.exponential_smoothing.ets import ETSModel

model = ETSModel(dataset[target], error="add", trend="add", seasonal="add", damped_trend=True, seasonal_periods=7)
fit = model.fit(maxiter=10000)
fit.get_prediction(start=min(dataset.index), end=max(dataset.index)).summary_frame(alpha=0.05)

fit.param_names

fit.params

"""# Custom"""

from sklearn.base import BaseEstimator, RegressorMixin


class ExpSmoothingRegressor(BaseEstimator, RegressorMixin):
    # https://www.statsmodels.org/devel/generated/statsmodels.tsa.exponential_smoothing.ets.ETSModel.html

    def __init__(self, error='add', trend=None, damped_trend=False, seasonal=None, seasonal_periods=None):
        self.error = error
        self.trend = trend
        self.damped_trend = damped_trend
        self.seasonal = seasonal
        self.seasonal_periods = seasonal_periods

        self.model = None
        self.predictions= None

    def fit(self, X, y):
        model = ETSModel(y, error=self.error, trend=self.trend, seasonal=self.seasonal,
                         damped_trend=self.damped_trend, seasonal_periods=self.seasonal_periods)
        self.model = model.fit(maxiter=10000)
        return self

    def predict(self, X):
        X = np.ndarray.flatten(X)
        self.predictions = self.model.get_prediction(start=min(X), end=max(X)).summary_frame(alpha=0.1)
        return self.predictions['mean']

    def get_params(self, deep=True):
        return {"error": self.error, 'trend': self.trend, 'damped_trend': self.damped_trend, 'seasonal': self.seasonal,
                'seasonal_periods': self.seasonal_periods}

    def set_params(self, **parameters):
        for parameter, value in parameters.items():
            setattr(self, parameter, value)
        return self

import warnings
warnings.filterwarnings('ignore')

features = ['date']

params = {'error': ['add'], 'trend': ['add'], 'damped_trend': [True], 'seasonal': ['add'], 'seasonal_periods': [7]}
regressor = ExpSmoothingRegressor()

results = check_model(regressor, params, dataset, h=7*6, gap=7*6)
results['best_params']

imp = pd.DataFrame({'param': results['model'].named_steps['regressor'].model.param_names, 'value': results['model'].named_steps['regressor'].model.params})
imp[~imp['param'].str.contains('initial')].sort_values('value', ascending=True).plot.barh(x='param', y='value')

features = ['date']

params = {'error': ['add', 'mul'], 'trend': [None, 'add', 'mul'], 'damped_trend': [True, False], 'seasonal': [None, 'add', 'mul'], 'seasonal_periods': [7, 30]}
regressor = ExpSmoothingRegressor()

results = check_model(regressor, params, dataset)
results['best_params']