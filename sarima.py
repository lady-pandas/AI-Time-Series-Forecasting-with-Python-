# -*- coding: utf-8 -*-
"""sarima.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cR-ed1KpEFPLpwtuNtFzq98fJTTjlxag
"""

import pandas as pd

"""# Introduction

## COVID data
"""

covid_data = pd.read_csv("https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/owid-covid-data.csv")
covid_data.head(2)

ax = covid_data[(covid_data['location']=='World')].plot(x='date', y='new_cases', title='COVID-19: Daily new cases', figsize=(9, 5))
ax.get_legend().remove()
ax.spines['top'].set_visible(False)
ax.spines['right'].set_visible(False)
#fig = ax.get_figure()
#fig.savefig('pictures/covid_world_daily.png')

"""# SARIMAX

## Moving Average
"""

import math
import numpy as np

n = 300
sigma  = 2.0

df = pd.DataFrame({
    'Z': np.random.normal(loc=0.0, scale=sigma, size=n),
    'L': np.random.lognormal(mean=0.0, sigma=sigma, size=n),
})
df['L0'] = df['L'] - df['L'].mean() # math.exp(sigma**2/2)
df['logL'] = df['L'].apply(math.log)

df.plot.kde()

df.describe()

def pretty_plot(series, title, name=None):
    ax=series.plot(title=title, figsize=(9, 5))
    #ax.get_legend().remove()
    ax.spines['top'].set_visible(False)
    ax.spines['right'].set_visible(False)
    
    if name is not None:
        fig = ax.get_figure()
        fig.savefig(f'pictures/{name}.png')

pretty_plot(df['Z'], title='Gaussian white noise')

pretty_plot(df['L0'], title='Log-normal white noise')

# MA
beta_1 = 0.8
beta_2 = 0.3

df['MA(2)'] = df['Z'] + beta_1*df['Z'].shift(1) + beta_2*df['Z'].shift(2)
df['MA(1)'] = df['Z'] + beta_1*df['Z'].shift(1)

df['MA(2) L'] = df['L0'] + beta_1*df['L0'].shift(1) + beta_2*df['L0'].shift(2)
df['MA(1) L'] = df['L0'] + beta_1*df['L0'].shift(1)

df[['Z', 'MA(1)', 'MA(2)']].plot.density()

df[['L0', 'MA(1) L', 'MA(2) L']].plot.density()

from statsmodels.tsa.stattools import adfuller, kpss
#https://www.statsmodels.org/stable/generated/statsmodels.tsa.stattools.adfuller.html
#https://www.statsmodels.org/stable/generated/statsmodels.tsa.stattools.kpss.html

adfuller(df['MA(1)'].dropna(), regression='c')

kpss(df['MA(1)'].dropna(), regression='c') #, nlags='auto')

adfuller(df['MA(1) L'].dropna(), regression='c')

"""## Autocorrelation function"""

from statsmodels.graphics.tsaplots import plot_acf
# https://www.statsmodels.org/stable/generated/statsmodels.graphics.tsaplots.plot_acf.html

plot_acf(df['MA(1)'].dropna(), title='Autocorrelation for MA(1)');

plot_acf(df['MA(2)'].dropna(), title='Autocorrelation for MA(2)');

plot_acf(df['MA(1) L'].dropna(), title='Autocorrelation for MA(1) on log-normal noise');

from matplotlib import pyplot as plt

fig, ax = plt.subplots(figsize=(9,5))
plot_acf(df['MA(1)'].dropna(), ax=ax, title='Autocorrelation for MA(1)')
ax.spines['top'].set_visible(False)
ax.spines['right'].set_visible(False)
plt.savefig('acf.png')

"""## AutoRegressive"""

#!pip install --upgrade statsmodels

from statsmodels.tsa.arima_process import arma_generate_sample

df['AR(1)'] = arma_generate_sample(ar=[1, 0.9], ma=[1], nsample=n) #, scale=sigma)

df['AR(1)'].plot(title='AR(1)')

pretty_plot(df['AR(1)'], title='AR(1)')
plt.savefig('ar1.png')

"""## Partial Autocorrelation Function"""

from statsmodels.tsa.stattools import pacf
# https://www.statsmodels.org/stable/generated/statsmodels.graphics.tsaplots.plot_acf.html
from statsmodels.graphics.tsaplots import plot_pacf

plot_pacf(df['AR(1)'].dropna());

fig, ax = plt.subplots(figsize=(9,5))
plot_pacf(df['AR(1)'].dropna(), ax=ax, title='Partial Autocorrelation for AR(1)')
plt.savefig('pacf.png')

"""## Parameters estimation"""

from statsmodels.tsa.statespace.sarimax import SARIMAX

model = SARIMAX(df['MA(1)'], exog=None, order=(0, 0, 1), seasonal_order=(0, 0, 0, 0), trend=None)
model_fit = model.fit()
model_fit.params

model = SARIMAX(df['MA(1) L'], exog=None, order=(0, 0, 1), seasonal_order=(0, 0, 0, 0), trend=None)
model_fit = model.fit()
model_fit.params

#math.exp(sigma**2-1) * math.exp(sigma**2)

model = SARIMAX(df['AR(1)'], exog=None, order=(1, 0, 0), seasonal_order=(0, 0, 0, 0), trend=None)
model_fit = model.fit()
model_fit.params

from statsmodels.tsa.arima_process import arma_generate_sample

df['AR(4)'] = arma_generate_sample(ar=[1, 0.8, 0.5, 0.3, 0.1], ma=[1], nsample=n, scale=sigma)
model = SARIMAX(df['AR(4)'], exog=None, order=(4, 0, 0), seasonal_order=(0, 0, 0, 0), trend=None)
model_fit = model.fit()
model_fit.params

df['AR(4)'].plot()

plot_pacf(df['AR(4)'].dropna());

#df = pd.DataFrame()
df['AR(1) L'] = arma_generate_sample(ar=[1, 0.8], ma=[1], nsample=n, distrvs=np.random.lognormal, scale=sigma)

df['AR(4) L'] = arma_generate_sample(ar=[1, 0.8, 0.5, 0.3, 0.1], ma=[1], nsample=n, distrvs=np.random.lognormal, scale=sigma)
model = SARIMAX(df['AR(4) L'], exog=None, order=(4, 0, 0), seasonal_order=(0, 0, 0, 0), trend=[1])
model_fit = model.fit()
model_fit.params

df['AR(4) L'].std()

df['AR(4) L'].plot()

plot_pacf(df['AR(4) L'].dropna());

"""## Checking various distributions"""

from statsmodels.tsa.statespace.sarimax import SARIMAX
from statsmodels.tsa.arima_process import arma_generate_sample
import numpy as np
import pandas as pd
from statsmodels.tsa.stattools import pacf
from statsmodels.tsa.stattools import adfuller

sigma = 2
normal = arma_generate_sample(ar=[1]+[0.8, 0.5, 0.3, 0.1], ma=[1], nsample=1000, scale=sigma)

#pd.Series(sigma*pareto(size=1000)).hist()

pd.Series(normal).plot()

from statsmodels.tsa.stattools import kpss

def estimate_params(mc, dist=np.random.standard_normal, ar_params=[0.8, 0.5, 0.3, 0.1], n=300, sigma=sigma):
    np.random.seed(mc)
    normal = arma_generate_sample(ar=[1] + ar_params, distrvs=dist, ma=[1], nsample=n, scale=sigma)
    
    p = pd.Series(abs(pacf(normal, nlags=10)))
    m = p.rolling(5, min_periods=1).mean()

    model = SARIMAX(normal, exog=None, order=(4, 0, 0), seasonal_order=(0, 0, 0, 0), trend=[1])
    model_fit = model.fit()
    return pd.DataFrame({'n': n, 'dist': dist.__name__, 'params': ar_params, 'est_params': -model_fit.params[1:-1], 
                         'coeff': model_fit.params[1], 'sigma2':sigma*sigma, 'est_sigma2': model_fit.params[-1], 
                         'est_p': m[m < (m.shift(1)*0.7)].index.min() - 1, 
                         'pacf': p[1:5],
                         'stationary_ct': adfuller(normal, regression='ct')[1] < 0.05,
                         'stationary_ct_kpss': kpss(normal, regression='ct', nlags="auto")[1] > 0.05,
                         'stationary_c': adfuller(normal, regression='c')[1] < 0.05
                        })

estimate_params(1)

def pareto(size):
    return np.random.pareto(10, size)

dist_vec = [np.random.standard_normal, np.random.exponential, np.random.poisson, np.random.lognormal, pareto]
n_vec = [24, 48, 72, 100, 200, 300, 500, 1000]
mc_vec = range(100)

# # TODO check stationarity - wrongly assumed they are not statinary
# # guessing parameter on pacf
# res_array = []
# for dist in dist_vec:
#     print(dist)
#     for n in n_vec:
#         for mc in mc_vec:
#             res_one = estimate_params(mc=mc, dist=dist, n=n)
#             res_one['mc'] = mc
#             res_array.append(res_one)

# res = pd.concat(res_array)

"""## AutoRegressive Moving Average"""

df['ARMA(1,1)'] = df['AR(1)'] + df['MA(1)']  #arma_generate_sample(ar=[1, -0.9], ma=[1, 0.2], nsample=n, scale=sigma) 
#df['ARMA(1,1) L'] = df['AR(1) L'] + df['MA(1) L']

df['ARMA(1,1)'].plot()

plot_pacf(df['ARMA(1,1)'].dropna());

plot_acf(df['ARMA(1,1)'].dropna());

model = SARIMAX(df['ARMA(1,1)'], exog=None, order=(1, 0, 1), seasonal_order=(0, 0, 0, 0), trend=None)
model_fit = model.fit()
model_fit.params

"""## AutoRegressive Integrated Moving Average"""

import matplotlib.pyplot as plt

df['t'] = range(df.shape[0])

df['ARIMA(1,1,1)'] = df['ARMA(1,1)'] + df['t']/5

df['ARIMA(1,1,1)'].plot()

adfuller(df['ARIMA(1,1,1)'].dropna(), regression='ct')

kpss(df['ARIMA(1,1,1)'].dropna(), regression='c', nlags='auto')

adfuller(df['ARIMA(1,1,1)'].diff(1).dropna(), regression='c')

fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(15,10))
df['ARIMA(1,1,1)'].plot(title='ARIMA(1,1,1)', ax=ax1)
ax1.spines['top'].set_visible(False)
ax1.spines['right'].set_visible(False)

df['ARIMA(1,1,1)'].diff(1).plot(ax=ax2, title='Differenced ARIMA(1,1,1)')
ax2.spines['top'].set_visible(False)
ax2.spines['right'].set_visible(False)

plot_pacf(df['ARIMA(1,1,1)'].diff(1).dropna(), title='Partial Autocorrelation', ax=ax3)
ax3.spines['top'].set_visible(False)
ax3.spines['right'].set_visible(False)

plot_acf(df['ARIMA(1,1,1)'].diff(1).dropna(), title='Autocorrelation', ax=ax4)
ax4.spines['top'].set_visible(False)
ax4.spines['right'].set_visible(False)

#fig = ax.get_figure()
#fig.savefig('pictures/arima.png')

model = SARIMAX(df['ARIMA(1,1,1)'], exog=None, order=(1, 1, 1), seasonal_order=(0, 0, 0, 0), trend=[1])
model_fit = model.fit()
model_fit.params

"""## Seasonal AutoRegressive Moving Average"""

df['cos'] = df['t'].apply(lambda x: 10*math.cos(x / 12 * 2 * math.pi) )
df['SARIMA (0,1,1) (0,1,0)12'] = df['cos'] + df['MA(1)'] + df['t']*df['t']/1000
df['SARIMA (0,1,1) (0,1,0)12 L'] = 5*df['cos'] + df['AR(1) L'] + df['t']*df['t']/100

df['SARIMA (0,1,1) (0,1,0)12'].plot()

#df['SARIMA (0,1,1) (0,1,0)12 L'].plot()

fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(15,10))
df['SARIMA (0,1,1) (0,1,0)12'].iloc[:200].plot(title='SARIMA (0,2,1) (0,1,0)12', ax=ax1)
ax1.spines['top'].set_visible(False)
ax1.spines['right'].set_visible(False)

df['SARIMA (0,1,1) (0,1,0)12'].iloc[:200].diff(12).plot(ax=ax2, title='Differenced seasonality')
ax2.spines['top'].set_visible(False)
ax2.spines['right'].set_visible(False)

df['SARIMA (0,1,1) (0,1,0)12'].iloc[:200].diff(12).diff(1).diff(1).plot(ax=ax3, title='Differenced trends')
ax3.spines['top'].set_visible(False)
ax3.spines['right'].set_visible(False)

plot_acf(df['SARIMA (0,1,1) (0,1,0)12'].iloc[:200].diff(12).diff(1).diff(1).dropna(), title='Autocorrelation', ax=ax4)
ax4.spines['top'].set_visible(False)
ax4.spines['right'].set_visible(False)

#fig = ax.get_figure()
#fig.savefig('pictures/sarima.png')

model = SARIMAX(df['SARIMA (0,1,1) (0,1,0)12'], exog=None, order=(0,2,1), seasonal_order=(0, 1, 0, 12), trend=None)
model_fit = model.fit()
model_fit.params

fcst = model_fit.get_forecast(2*12).summary_frame()

fig, ax = plt.subplots(figsize=(10, 5))

df['SARIMA (0,1,1) (0,1,0)12'].plot(ax=ax)

fcst['mean'].plot(ax=ax, style='k--')
ax.fill_between(fcst.index, fcst['mean_ci_lower'], fcst['mean_ci_upper'], color='k', alpha=0.1);

ax.spines['top'].set_visible(False)
ax.spines['right'].set_visible(False)

fig = ax.get_figure()
fig.savefig(f'prediction_intervals.png')

fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(15,10))
df['SARIMA (0,1,1) (0,1,0)12 L'].iloc[:200].plot(title='SARIMA (0,2,1) (0,1,0)12', ax=ax1)
ax1.spines['top'].set_visible(False)
ax1.spines['right'].set_visible(False)

df['SARIMA (0,1,1) (0,1,0)12 L'].iloc[:200].diff(12).plot(ax=ax2, title='Differenced seasonality')
ax2.spines['top'].set_visible(False)
ax2.spines['right'].set_visible(False)

df['SARIMA (0,1,1) (0,1,0)12 L'].iloc[:200].diff(12).diff(1).diff(1).plot(ax=ax3, title='Differenced trends')
ax3.spines['top'].set_visible(False)
ax3.spines['right'].set_visible(False)

plot_acf(df['SARIMA (0,1,1) (0,1,0)12 L'].iloc[:200].diff(12).diff(1).diff(1).dropna(), title='Autocorrelation', ax=ax4)
ax4.spines['top'].set_visible(False)
ax4.spines['right'].set_visible(False)

#fig = ax.get_figure()
#fig.savefig('pictures/sarima.png')

model = SARIMAX(df['SARIMA (0,1,1) (0,1,0)12 L'], exog=None, order=(1,2,0), seasonal_order=(0, 1, 0, 12), trend=None)
model_fit = model.fit()
model_fit.params
#model_fit.get_prediction(start=dataset.index[0], end=dataset.index[10]).summary_frame()



#!pip install pmdarima

fcst = model_fit.get_forecast(12).summary_frame()

fig, ax = plt.subplots(figsize=(15, 5))

df['SARIMA (0,1,1) (0,1,0)12 L'].plot(ax=ax)

fcst['mean'].plot(ax=ax, style='k--')
ax.fill_between(fcst.index, fcst['mean_ci_lower'], fcst['mean_ci_upper'], color='k', alpha=0.1);

"""## Fitting best model"""

!pip install pmdarima
from pmdarima.arima import auto_arima

model = auto_arima(df['MA(1)'].dropna())
model.summary()

model = auto_arima(df['AR(1)'].dropna())
model.summary()

fig, ax = plt.subplots(figsize=(15, 5))

df['AR(1)'].plot(ax=ax)

pd.Series(model.predict(), index=range(df.index.max(), df.index.max()+ len(model.predict()) )).plot(ax=ax, style='k--')

"""# COVID dat"""

covid = pd.read_csv("https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/owid-covid-data.csv")
#covid.head(2)

target = 'new_cases'
h = 14

dataset = covid[(covid['location']=='World')].copy()[[target, 'date']]
dataset[[target]].plot()

model = SARIMAX(dataset[target], exog=None, order=(1,2,0), seasonal_order=(0, 1, 0, 12), trend=None)
model_fit = model.fit()
model_fit.params



from sklearn.base import BaseEstimator, RegressorMixin


class SARIMARegressor(BaseEstimator, RegressorMixin):
    # https://www.statsmodels.org/dev/generated/statsmodels.tsa.statespace.sarimax.SARIMAX.html

    def __init__(self, order=(1,2,0), seasonal_order=(0, 1, 0, 12)):
        self.order = order
        self.seasonal_order = seasonal_order

        self.model = None
        self.predictions= None
        self.feature_importances_ = [0]

    def fit(self, X, y):
        model = SARIMAX(y, exog=None, order=self.order, seasonal_order=self.seasonal_order, trend=None)
        model_fit = model.fit()
        self.model = model_fit
        return self

    def predict(self, X):
        X = np.ndarray.flatten(X)
        predictions = self.model.get_prediction(start=min(X), end=max(X)).summary_frame()
        self.predictions = predictions[['mean_ci_lower', 'mean_ci_upper']].rename(columns={'mean_ci_lower': 'pi_lower', 'mean_ci_upper': 'pi_upper'})
        return predictions['mean'].values

    def get_params(self, deep=True):
        return {"order": self.order, 'seasonal_order': self.seasonal_order}

    def set_params(self, **parameters):
        for parameter, value in parameters.items():
            setattr(self, parameter, value)
        return self

sr = SARIMARegressor()
sr.fit(dataset[target], dataset[target])

!pip install sklearn-ts==0.0.5

from sklearn_ts.validator import check_model

import warnings
warnings.filterwarnings('ignore')

params = {'order': [(4, 1, 4)], 'seasonal_order': [(0, 1, 1, 7)]}
regressor = SARIMARegressor()

dataset.index = dataset['date']

results = check_model(regressor, params, dataset)
results['best_params']

"""## Sktime"""

!pip install sktime==0.6.1
from sktime.forecasting.arima import AutoARIMA

forecaster = AutoARIMA(suppress_warnings=True,sp=12)
forecaster.fit(df['SARIMA (0,1,1) (0,1,0)12'].dropna())

forecaster.get_fitted_params()

?AutoARIMA

y_pred = forecaster.predict(fh=list(range(1, 4*12 +1)), return_pred_int=True, alpha=0.05)
y_pred[1]['mean'] = y_pred[0]
y_pred = y_pred[1]
y_pred.head()

fig, ax = plt.subplots(figsize=(15, 5))

df['SARIMA (0,1,1) (0,1,0)12'].plot(ax=ax)

y_pred['mean'].plot(ax=ax, style='k--')
ax.fill_between(y_pred.index, y_pred['lower'], y_pred['upper'], color='k', alpha=0.1)

forecaster = AutoARIMA(suppress_warnings=True,sp=12)
dataset.index = pd.to_datetime(dataset['date'])
forecaster.fit(dataset['new_cases'])

forecaster.get_fitted_params()