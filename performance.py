# -*- coding: utf-8 -*-
"""performance.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dBhZDv4l8RBjLguxDyJZm0r560_P135a
"""

import matplotlib.pyplot as plt
import math
import pandas as pd
import numpy as np

!pip install sktime
from sktime.datasets import load_airline
from sktime.utils.plotting import plot_series
from sktime.forecasting.model_selection import temporal_train_test_split

from sktime.forecasting.exp_smoothing import ExponentialSmoothing
from sktime.forecasting.naive import NaiveForecaster

from sktime.performance_metrics.forecasting import mean_absolute_percentage_error, mean_absolute_error, mean_squared_error, mean_asymmetric_error

y = load_airline()
y_train, y_test = temporal_train_test_split(y, test_size=36)
fh = np.arange(len(y_test)) + 1

forecaster = NaiveForecaster(strategy="last", sp=12)
forecaster.fit(y_train)
y_pred = forecaster.predict(fh)

plot_series(y_train, y_test, y_pred, labels=["y_train", "y_test", "y_pred"])
plt.savefig('naive_seasonal.png')

metrics_naive_seasonal = {
    'MAPE': mean_absolute_percentage_error(y_pred, y_test, symmetric=False),
    'SMAPE': mean_absolute_percentage_error(y_pred, y_test, symmetric=True),
    'MAE': mean_absolute_error(y_pred, y_test),
    'MSE': mean_squared_error(y_pred, y_test),
    'RMSE': math.sqrt(mean_squared_error(y_pred, y_test))
}

forecaster = NaiveForecaster(strategy="last", sp=1)
forecaster.fit(y_train)
y_pred = forecaster.predict(fh)

plot_series(y_train, y_test, y_pred, labels=["y_train", "y_test", "y_pred"])
plt.savefig('naive.png')

metrics_naive = {
    'MAPE': mean_absolute_percentage_error(y_pred, y_test, symmetric=False),
    'SMAPE': mean_absolute_percentage_error(y_pred, y_test, symmetric=True),
    'MAE': mean_absolute_error(y_pred, y_test),
    'MSE': mean_squared_error(y_pred, y_test),
    'RMSE': math.sqrt(mean_squared_error(y_pred, y_test))
}

errors = pd.DataFrame([metrics_naive, metrics_naive_seasonal], index=['naive', 'naive seasonal']).T.loc[['MSE', 'RMSE', 'MAE', 'MAPE', 'SMAPE'],:]

print(errors.to_latex())

pd.Series(abs(y_pred - y_test)).hist()

covid = pd.read_csv("https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/owid-covid-data.csv")
#covid.head(2)#

y = covid[(covid['location']=='World')]
y.index = pd.to_datetime(y['date'])
y = y.asfreq('D')
#y = y[['new_cases']]
#y.plot()

forecaster = NaiveForecaster(strategy="last", sp=7)
forecaster.fit(y['new_cases'])
y_pred = forecaster.predict(fh)

plot_series(y['new_cases'], y_pred, labels=["y_train","y_pred"])
#plt.savefig('naive_seasonal.png')

from sklearn.base import BaseEstimator, RegressorMixin
from sktime.forecasting.naive import NaiveForecaster
import numpy as np
import pandas as pd


class NaiveRegressor(BaseEstimator, RegressorMixin):

    def __init__(self, strategy='last', sp=7):
        self.strategy = strategy
        self.sp = sp

        self.model = None
        self.y_ = None

    def fit(self, X, y):
        forecaster = NaiveForecaster(strategy=self.strategy, sp=self.sp)

        # TODO inference frequency
        y = y.asfreq(pd.infer_freq(y.index))
        self.y_ = y
        forecaster.fit(y)
        self.model = forecaster
        return self

    def predict(self, X):
        # TODO not valid for fitting to train
        return self.model.predict(np.arange(X.shape[0]) + 1)

    def get_params(self, deep=True):
        return {'strategy': self.strategy, 'sp': self.sp}

    def set_params(self, **parameters):
        for parameter, value in parameters.items():
            setattr(self, parameter, value)
        return self

#!pip install sklearn-ts==0.0.2

from sklearn_ts.validator import check_model

params = {'strategy': ['last'], 'sp': [1, 7, 30]}
regressor = NaiveRegressor()

dataset = y[['new_cases', 'date']].copy()

results = check_model(
    regressor, params, dataset,
    target='new_cases', features=['new_cases'], categorical_features=[], user_transformers=[],
    h=14, n_splits=5, gap=14,
    plotting=True
)

results

