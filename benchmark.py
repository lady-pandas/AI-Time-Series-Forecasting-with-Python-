# -*- coding: utf-8 -*-
"""benchmark.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ISuRgSUkVqUq0bratdYVMLZm4PPuW9GJ
"""

import pandas as pd
import numpy as np

"""# Load data"""

covid = pd.read_csv("https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/owid-covid-data.csv")
covid.head(2)

y = covid[(covid['location']=='World')]
y.index = pd.to_datetime(y['date'])
y = y.asfreq('D')
y = y[['new_cases']]
y.plot()

"""# Distribution focused

[DummyRegressor](https://scikit-learn.org/stable/modules/generated/sklearn.dummy.DummyRegressor.html)
"""

#https://scikit-learn.org/stable/modules/generated/sklearn.dummy.DummyRegressor.html
from sklearn.dummy import DummyRegressor

dummy_regr = DummyRegressor(strategy="mean")
dummy_regr.fit(y, y)

y.mean()

y['mean'] = dummy_regr.predict(y)

y.plot()

"""# Naive

[NaiveForecaster](https://www.sktime.org/en/latest/api_reference/modules/auto_generated/sktime.forecasting.naive.NaiveForecaster.html)
"""

#https://www.sktime.org/en/latest/api_reference/modules/auto_generated/sktime.forecasting.naive.NaiveForecaster.html
!pip install sktime==0.6.1
from sktime.forecasting.naive import NaiveForecaster
#https://www.sktime.org/en/latest/api_reference/modules/auto_generated/sktime.forecasting.base.ForecastingHorizon.html
from sktime.forecasting.base import ForecastingHorizon
from sktime.utils.plotting import plot_series

strategy = 'drift'
forecaster = NaiveForecaster(strategy=strategy, window_length=30, sp=7)
forecaster.fit(y['new_cases'])

h = 30
fh = ForecastingHorizon(pd.date_range(max(y.index), periods=h, freq="d", closed='right'), is_relative=False)

y_pred = forecaster.predict(fh=fh)

import matplotlib.pyplot as plt
plot_series(y['new_cases'], y_pred, labels=["y", "y_pred"])
plt.savefig(f'naive_{strategy}.png')

"""# Expert regressor"""

from sklearn.base import BaseEstimator, RegressorMixin

class ExpertRegressor(BaseEstimator, RegressorMixin):

    def __init__(self, expert_value=400000):
        self.expert_value = expert_value

    def fit(self, X, y):
        self.mean = np.mean(X.values)
        return self

    def predict(self, X):
        return min(self.expert_value, self.mean)

    # def get_params(self, deep=True):
    #     return {'expert_value': self.expert_value}

    # def set_params(self, **parameters):
    #     for parameter, value in parameters.items():
    #         setattr(self, parameter, value)
    #     return self

er = ExpertRegressor()
er.fit(y[['new_cases']], y['new_cases'])
y['er'] = er.predict(y[['new_cases']])
y[['new_cases', 'er']].plot()

er = ExpertRegressor(expert_value=200000)
er.fit(y[['new_cases']], y['new_cases'])
y['er'] = er.predict(y)
y[['new_cases', 'er']].plot()

